==8174== Memcheck, a memory error detector
==8174== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==8174== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==8174== Command: ./pa06 images/corrupt-testcases/bad-comment-len.ee264 outputs/output1
==8174== Parent PID: 8170
==8174== 
--8174-- 
--8174-- Valgrind options:
--8174--    --leak-check=full
--8174--    --verbose
--8174--    --log-file=valgrindlog5
--8174-- Contents of /proc/version:
--8174--   Linux version 2.6.32-358.18.1.el6.x86_64 (mockbuild@x86-003.build.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-3) (GCC) ) #1 SMP Fri Aug 2 17:04:38 EDT 2013
--8174-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--8174-- Page sizes: currently 4096, max supported 4096
--8174-- Valgrind library directory: /usr/lib64/valgrind
--8174-- Reading syms from /home/shay/b/wang1368/ECE264/solutions/solutions/PA06/pa06
--8174-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--8174--    object doesn't have a dynamic symbol table
--8174-- Reading syms from /lib64/ld-2.12.so
--8174-- Scheduler: using generic scheduler lock implementation.
--8174-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==8174== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-8174-by-wang1368-on-ecelinux12.ecn.purdue.edu
==8174== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-8174-by-wang1368-on-ecelinux12.ecn.purdue.edu
==8174== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-8174-by-wang1368-on-ecelinux12.ecn.purdue.edu
==8174== 
==8174== TO CONTROL THIS PROCESS USING vgdb (which you probably
==8174== don't want to do, unless you know exactly what you're doing,
==8174== or are doing some strange experiment):
==8174==   /usr/lib64/valgrind/../../bin/vgdb --pid=8174 ...command...
==8174== 
==8174== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==8174==   /path/to/gdb ./pa06
==8174== and then give GDB the following command
==8174==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=8174
==8174== --pid is optional if only one valgrind process is running
==8174== 
--8174-- REDIR: 0x3f4c417520 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--8174-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--8174-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--8174-- REDIR: 0x3f4c417390 (index) redirected to 0x4a07bf0 (index)
--8174-- REDIR: 0x3f4c417410 (strcmp) redirected to 0x4a08530 (strcmp)
--8174-- Reading syms from /lib64/libc-2.12.so
--8174-- REDIR: 0x3f4c884ec0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--8174-- REDIR: 0x3f4c887180 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--8174-- REDIR: 0x3f4c882e30 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--8174-- REDIR: 0x3f4c87f8d0 (strcmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--8174-- REDIR: 0x3f4c927ac0 (__strcmp_sse42) redirected to 0x4a08490 (strcmp)
--8174-- REDIR: 0x3f4c87a8e0 (malloc) redirected to 0x4a0696c (malloc)
--8174-- REDIR: 0x3f4c889860 (memcpy) redirected to 0x4a08b20 (memcpy)
==8174== Warning: set address range perms: large range [0x3aeed040, 0x7c694a98) (undefined)
--8174-- REDIR: 0x3f4c8846f0 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--8174-- REDIR: 0x3f4c87b710 (free) redirected to 0x4a06369 (free)
==8174== Warning: set address range perms: large range [0x3aeed028, 0x7c694ab0) (noaccess)
--8174-- REDIR: 0x3f4c88ace0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
==8174== Invalid read of size 8
==8174==    at 0x400D65: freeImage (answer06.c:278)
==8174==    by 0x400A4F: main (pa06.c:97)
==8174==  Address 0x10 is not stack'd, malloc'd or (recently) free'd
==8174== 
==8174== 
==8174== Process terminating with default action of signal 11 (SIGSEGV)
==8174==  Access not within mapped region at address 0x10
==8174==    at 0x400D65: freeImage (answer06.c:278)
==8174==    by 0x400A4F: main (pa06.c:97)
==8174==  If you believe this happened as a result of a stack
==8174==  overflow in your program's main thread (unlikely but
==8174==  possible), you can try to increase the size of the
==8174==  main thread stack using the --main-stacksize= flag.
==8174==  The main thread stack size used in this run was 10485760.
==8174== 
==8174== HEAP SUMMARY:
==8174==     in use at exit: 100 bytes in 1 blocks
==8174==   total heap usage: 4 allocs, 3 frees, 1,098,546,444 bytes allocated
==8174== 
==8174== Searching for pointers to 1 not-freed blocks
==8174== Checked 64,360 bytes
==8174== 
==8174== 100 bytes in 1 blocks are definitely lost in loss record 1 of 1
==8174==    at 0x4A069EE: malloc (vg_replace_malloc.c:270)
==8174==    by 0x400BFB: loadImage (answer06.c:231)
==8174==    by 0x4009E5: main (pa06.c:85)
==8174== 
==8174== LEAK SUMMARY:
==8174==    definitely lost: 100 bytes in 1 blocks
==8174==    indirectly lost: 0 bytes in 0 blocks
==8174==      possibly lost: 0 bytes in 0 blocks
==8174==    still reachable: 0 bytes in 0 blocks
==8174==         suppressed: 0 bytes in 0 blocks
==8174== 
==8174== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 6 from 6)
==8174== 
==8174== 1 errors in context 1 of 2:
==8174== Invalid read of size 8
==8174==    at 0x400D65: freeImage (answer06.c:278)
==8174==    by 0x400A4F: main (pa06.c:97)
==8174==  Address 0x10 is not stack'd, malloc'd or (recently) free'd
==8174== 
--8174-- 
--8174-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--8174-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==8174== 
==8174== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 6 from 6)
